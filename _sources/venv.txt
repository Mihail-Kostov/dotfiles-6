
.. index:: dotfiles.venv
.. index:: venv
.. _venv-:

======
venv
======

Things named "venv"
~~~~~~~~~~~~~~~~~~~~~
"venv" is a common shortname for "virtualenv" (*virtual environment*).

* :ref:`pyvenv` (``python -m venv``)
  is now in the :ref:`Python >= 3.3 <python3>`
  standard library.

  * pyvenv is very similar to :ref:`virtualenv`
    in terms of standard :ref:`venv paths`.

* :ref:`dotfiles.venv` (``python -m dotfiles.venv.ipython_config``)

  | Src: (:ref:`./scripts/venv.py <venv.py>`,
  | Docs:

  * In this context, when we say "*venv*", we mean :ref:`dotfiles.venv`.
  * :ref:`dotfiles.venv` generates configuration sets of
    :ref:`venv paths` and/or :ref:`venv shell configuration`.

* The :ref:`Venv.vim` :ref:`Vim` plugin bundle includes
  :ref:`CdAlias <cdalias>` functions which reference
  reference :ref:`venv paths` (``:Cdhelp``).


.. index:: pyvenv
.. _pyvenv:

pyvenv
==========
| Src: https://hg.python.org/cpython/file/tip/Lib/venv
| Docs: https://docs.python.org/3/library/venv.html

``pyvenv`` is the :ref:`Virtualenv` -like functionality
now included in :ref:`Python >= 3.3 <python3>` (``python3 -m venv``)

* :ref:`dotfiles.venv` is compatible with pyvenv paths.


.. index:: Venv (dotfiles.venv)
.. index:: dotfiles.venv
.. _dotfiles.venv:

dotfiles.venv
================
venv (*dotfiles.venv*) makes working with :ref:`virtualenv`,
:ref:`virtualenvwrapper`, :ref:`Bash`, :ref:`ZSH`,
:ref:`Vim`, and :ref:`IPython` within a project context very easy:


.. code:: bash

   we dotfiles;
   test "$_WRD" == "$WORKON_HOME/dotfiles/src/dotfiles"


.. index:: Venv parts
.. index:: Parts of a venv
.. _venv:

Parts of a venv
~~~~~~~~~~~~~~~~~~
There are a few parts to ``venv``:

* :ref:`venv.py`
      venv.py serves a number of DRY (*don't repeat yourself*) purposes:

      * Configure IPython / Jupyter at startup
      * Generate per-venv :ref:`venv shell configuration` for Bash, ZSH
      * Generate :ref:`venv.sh`, :ref:`venv.vim`, and :ref:`venv_ipymagics.py`.


* :ref:`venv.sh`
      venv.sh configures Bash/ZSH :ref:`CdAlias` functions
      (e.g. for initial terminal configuration).

      * venv.sh is generated by venv.py (``make generate_venv``)

* :ref:`venv.vim`
      venv.vim configures :ref:`Vim` :ref:`CdAlias` functions.

      * venv.vim is required and installed with Vundle in my :ref:`dotvim`.
      * venv.vim is generated by venv.py (``make generate_venv``)

* :ref:`ipython magics.py`
      `ipython magics.py` includes :ref:`IPython` :ref:`CdAlias` functions
      like ``%cdhelp`` and ``%dotfiles_status`` (``ds``).

      * venv_ipymagics.py is generated by venv.py (``make generate_venv``)

      | Src: `venv_ipymagics.py`_
      | Doc: :py:mod:`dotfiles.venv.venv_ipymagics`
      | Doc: :py:class:`CdAliases <dotfiles.venv.ipython_config.CdAlias>`

* ``etc/bash/`` `10-bashrc.venv.sh`_ configures :ref:`Bash` at startup
  (see: :ref:`Usage > Bash <dotfiles_bash_config>`)


.. index:: Installing Venv
.. _installing venv:

Installing Venv
~~~~~~~~~~~~~~~~~~

- [ ] Install :ref:`virtualenv`, :ref:`virtualenvwrapper`,
  and :ref:`dotfiles`

  .. code:: bash

      ## scripts/bootstrap_dotfiles.sh -I
      pip install virtualenvwrapper  # -> virtualenv

      ##
      virtual_env="$HOME/-wrk/-ve27/dotfiles"; cd $virtual_env;
      pip install -e 'git+https://github.com/westurner/dotfiles@master#egg=dotfiles'
      # git clone https://github.com/westurner/dotfiles "${virtual_env}/src/dotfiles"

      # symlink ~/.bashrc so that $PATH contains "${__DOTFILES}/scripts"
      _WRD="${virtual_env}/src/dotfiles"
      bash $_WRD/scripts/bootstrap_dotfiles.sh -h
      bash $_WRD/scripts/bootstrap_dotfiles.sh -S

      # Load the shell configuration
      source ~/.bashrc
      bootstrap_dotfiles.sh -h  # help
      bootstrap_dotfiles.sh -C  # check for dotfiles/venv components
      venv.py -h                # echo $PATH; ls $__DOTFILES/scripts/venv.py


- [ ] Create a new venv named ``dotfiles``:

  .. code:: bash

      # Create a venv named "dotfiles", workon it, and make FHS `venv paths`
      mkvirtualenv dotfiles; we dotfiles; venv_mkdirs;

      # Git clone into $_WRD:
      git clone https://github.com/westurner/dotfiles $_WRD;

      # Edit $_WRD/README.rst and $_WRD/Makefile
      (cdw; e README.rst Makefile)
      ew README.rst Makefile


- [ ] Configure a shell, print relevant env variables (twice),
  ``cd`` to the working directory (``$_WRD``),
  and open ``README.rst`` in a named :ref:`Vim` server for an existing
  venv named ``dotfiles``:

  .. code:: bash

      we dotfiles; ds; cdwrd; e README.rst
      we dotfiles; ew README.rst


- [ ] Configure the shell with :ref:`virtualenvwrapper`
  (and, optionally, an initial venv root ``/`` prefix):

  .. code:: bash

      ### etc/bash/07-bashrc.virtualenvwrapper.sh
      ## _setup_virtualenvwrapper
      source $(which virtualenvwrapper.sh)  # source virtualenvwrapper_lazy.sh
      ### etc/bash/08-bashrc.conda.sh
      ## _setup_conda [CONDA_ENVS_PATH [CONDA_ROOT]]
      ### etc/bash/10-bashrc.venv.sh
      source <(venv.py --prefix=/ --print-bash)

.. note::
    For a new venv (as might be created with ``mkvirtualenv dotfiles``),
    the ``$_SRC`` and ``$_WRD`` directories do not yet exist. You can
    create these like so:

    .. code:: bash

        ## _APP=dotfiles _WRD=$VIRTUAL_ENV/src/$_APP
        mkdir -p $_WRD

    Or, use the ``venv_mkdirs`` shell function
    to create a more complete :ref:`FHS` tree of directories under
    ``$VIRTUAL_ENV``:

    .. code:: bash

        venv_mkdirs; mkdir -p $_WRD



.. _10-bashrc.venv.sh:
    https://github.com/westurner/dotfiles/blob/master/etc/bash/10-bashrc.venv.sh
.. _ipython_config.py:
    https://github.com/westurner/dotfiles/blob/master/src/dotfiles/venv/ipython_config.py
.. _venv_ipymagics.py:
    https://github.com/westurner/dotfiles/blob/master/src/dotfiles/venv/venv_ipymagics.py




Working With Venv
~~~~~~~~~~~~~~~~~~~



``workon``
  ``workon` is a shell function defined by :ref:`virtualenvwrapper`

  * ``workon`` runs global and local virtualenvwrapper event scripts,
  * loads a virtualenv shell configuration
    (``source $WORKON_HOME/virtual_env/bin/activate``)
  * sets the :ref:`shell <shells>` ``$PATH``,
  * and then runs global and local virtualenvwrapper event scripts.
  * (see: ``virtualenvwrapper()`` for a list of virtualenvwrapper
    commands)


- [ ] Create and workon a venv
  (a prefixed and namespaced virtualenvwrapper virtualenv):

.. code:: bash

    # Workon a virtualenv with virtualenvwrapper and dotfiles.venv
    mkvirtualenv dotfiles;  # workon $WORKON_HOME/dotfiles
    workon_venv dotfiles;   # Create a virtualenv with virtualenvwrapper
    we dotfiles;            # we()  -> workon_venv()
    venv.py -xb dotfiles    # run a bash shell* within a virtualenv

    function we == workon_venv {
        # [...]
        source <(venv.py -q --print-bash --ve=dotfiles)
    }

- [ ] Create and workon a :ref:`conda` env:

.. code:: bash


   mkvirtualenv_conda      # Create a conda env with conda create
   workon_conda dotfiles;
   wec dotfiles;           # wec() -> workon_conda()


Verbosely:

.. code-block:: bash

   __WRK="~/-wrk"                    # cdwrk
   PROJECT_HOME="${__WRK}"           # cdph cdprojecthome
   WORKON_HOME="${__WRK}/-ve27"      # cdwh cdworkonhome
   __DOTFILES="~/-dotfiles"          # cdd  cddotfiles
                                     # a very special symlink to
                                     # $WORKON_HOME/dotfiles/src/dotfiles

   __VENV=$(which venv.py);
   __VENV="${__DOTFILES}/scripts/venv.py"  # 10-bashrc.venv.sh
   # venv()  { (set -x; $__VENV $@)    }   # 10-bashrc.venv.sh
   # venv-() { (set -x; $__VENV -e $@) }   # 10-bashrc.venv.sh

   # These all print venv.py --help:
   $__VENV --help
   venv.py --help
   venv -h

   # Print environment variables for the "dotfiles" venv:
   venv.py --print-vars --VIRTUAL_ENV="${WORKON_HOME}/dotfiles"
   venv.py --print-vars --virtual-env="${WORKON_HOME}/dotfiles"
   venv.py --print-vars --ve="${WORKON_HOME}/dotfiles"
   venv.py --print-vars --ve dotfiles
   venv.py --print-vars dotfiles

   # Generate a source-able Bash configuration script
   venv.py --print-bash dotfiles

   ## Workon the dotfiles virtualenv (in the current shell)
   we dotfiles

   ## Workon the dotfiles virtualenv (with a bash subshell)
   venv.py -x bash dotfiles
   venv.py -xb dotfiles


.. note:: The following commands are different to argparse
   (argument order matter with positional arguments)

   .. code:: bash

       # does not work:
       #! venv dotfiles --print-bash        # does not work

       # does work
       venv --print-bash dotfiles        # does work
       venv --ve=dotfiles --print-bash   # does work


.. index:: CdAlias
.. _cdalias:

CdAlias
=================
CdAliases make it easy to change directory (``cd``) to
:ref:`venv paths`.

Problem:

* Fully-expanded absolute virtualenv paths can be really long
  to type and remember.

Solutions:

* ``pushd`` and ``popd`` --- included with :ref:`Bash`/:ref:`ZSH` ---
  maintain a stack of directories.
* ``bashmarks`` maintains a set of ``DIR_`` environment variables
  and ``l``, ``s``, and ``g`` shell functions for listing,
  saving to, and going to a saved set of directories.
* :ref:`CdAliases <cdalias>` are functions for changing
  to a given directory path prefix
  as determined by shell variables like ``HOME`` (cdh),
  ``__WRK`` (cdwrk), ``WORKON_HOME`` (cdwh), ``VIRTUAL_ENV`` (cdv),
  ``_SRC`` (cds), and ``_WRD`` (cdw).

  * See: :ref:`Venv paths` for a more complete table of CdAliases.


* The venv :ref:`CdAlias <cdlias>` scripts are generated
  from
  the ``generate_venv`` ``Makefile`` build step
  at build time:

.. code:: bash

    ## ./Makefile
    generate_venv:
        # generate ipython_magics.py, venv.sh, and venv.vim
        $(_VENV) --print-ipython-magics . > ./src/dotfiles/venv/venv_ipymagics.py
        $(_VENV) --print-bash-aliases --compress --prefix=/ > ./etc/venv/venv.sh 
        $(_VENV) --print-bash --compress --prefix=/ | grep -v '^export HOME=' > ./etc/venv/venv_root_prefix.sh 
        $(_VENV) --print-vim-cdalias . > ./etc/venv/venv.vim

    ## Bash
    $ make generate_venv


* You can list all defined venv :ref:`CdAlias` functions
  in Bash, ZSH, IPython, and Vim:

  .. code:: bash

      cdhelp   # Bash/ZSH
      %cdhelp  # IPython
      cdhelp   # IPython
      :Cdhelp  # Vim


* Each :py:class:`CdAlias <dotfiles.venv.ipython_config.CdAlias>`
  defined in ``env.aliases`` is expanded for Bash, IPython, and Vim.
  For example, ``CdAlias('__WRD', aliases='w')`` is expanded to   # TODO FIXME

  .. code:: bash

      cdwrd  [<TAB>][path]  # Bash/ZSH
      cdw    [path][<TAB>]  # Bash/ZSH
      %cdwrd [path] # IPython
      cdwrd  [path] # IPython
      %cdw   [path] # IPython
      cdw    [path] # IPython
      :Cdwrd [path] # Vim
      :Cdw   [path] # Vim

  * See: :ref:`Venv paths` for a more complete table of CdAliases.

* Bash/ZSH cdaliases support tab-completion,
  and SHOULD error (return nonzero) if the given variable is undefined.

  .. code:: bash

      $ cdw || echo 'false'
      _WRD is not set
      false

* Bash/ZSH cdalias functions
  SHOULD error (return nonzero) if the given variable is undefined.


.. index:: Venv paths
.. _venv paths:

Venv paths
=============

Venv defines standard :ref:`fhs` and :ref:`Python` paths,
environment variables,
and `CdAliases <cdalias>`_
for routinizing workflow.

+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| **var name**        | **description**                | **cdaliases**                        | **example path**                       |
|                     |                                |                                      |                                        |
|                     |                                | Bash: ``cdhelp``                     |                                        |
|                     |                                |                                      |                                        |
|                     |                                | IPython: ``%cdhelp``                 |                                        |
|                     |                                |                                      |                                        |
|                     |                                | Vim: ``:Cdhelp``                     |                                        |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``HOME``            | user home directory            | Bash/ZSH: ``cdh``, ``cdhome``        | ``~/``                                 |
|                     |                                |                                      |                                        |
|                     |                                | IPython: ``%cdh``, ``%cdhome``       |                                        |
|                     |                                |                                      |                                        |
|                     |                                | Vim: ``:Cdh``, ``:Cdhome``           |                                        |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``__WRK``           | workspace root                 | ``cdwrk`` (ibid.)                    | ~/``-wrk``                             |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``WORKON_HOME``     | virtualenvs root               | ``cdwh``, ``cdworkonhome``, ``cdve`` | ~/-wrk/``-ve27``                       |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``CONDA_ENVS_PATH`` | condaenvs root                 | ``cdch``, ``cdcondahome``            | ~/-wrk/``-ce27``                       |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``VIRTUAL_ENV``     | virtualenv root                | ``cdv``, ``cdvirtualenv``            | ~/-wrk/-ve27/``dotfiles``              |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``_BIN``            | virtualenv executables         | ``cdb``, ``cdbin``                   | ~/-wrk/-ve27/dotfiles/``bin``          |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``_ETC``            | virtualenv configuration       | ``cd``, ``cdetc``                    | ~/-wrk/-ve27/dotfiles/``etc``          |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``_LIB``            | virtualenv lib directory       | ``cdl``, ``cdlib``                   | ~/-wrk/-ve27/dotfiles/``lib``          |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``_LOG``            | virtualenv log directory       | ``cdlog``                            | ~/-wrk/-ve27/dotfiles/``var/log``      |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``_SRC``            | virtualenv source repositories | ``cds``, ``cdsrc``                   | ~/-wrk/-ve27/dotfiles/``src``          |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+
| ``_WRD``            | virtualenv working directory   | ``cdw``, ``cdwrd``                   | ~/-wrk/-ve27/dotfiles/``src/dotfiles`` |
|                     |                                |                                      |                                        |
+---------------------+--------------------------------+--------------------------------------+----------------------------------------+

To generate this venv config:

.. code:: bash

   python -m dotfiles.venv.ipython_config --print-bash dotfiles
   venv.py --print-bash dotfiles
   venv --print-bash dotfiles docs
   venv --print-bash dotfiles ~/path
   venv --print-bash ~/-wrk/-ve27/dotfiles ~/path

To generate a default venv config with a prefix of ``/``:

.. code:: bash

    venv --print-bash --prefix=/

To launch an interactive shell within a venv:

.. code:: bash

    venv --run-bash dotfiles
    venv -xb dotfiles


.. index:: venv.py
.. _venv.py:

venv.py
==============

| Src: https://github.com/westurner/dotfiles/blob/master/etc/scripts/venv.py
| Src: https://github.com/westurner/dotfiles/blob/master/etc/venv/venv.py
| Docs :py:mod:`dotfiles.venv.ipython_config`

* Venv.py (:ref:`dotfiles.venv`)
  is a symlink to ``dotfiles.venv.ipython_config``

  * If the `dotfiles` package is on ``sys.path``,
    venv.py can also be run as ``python -m dotfiles.venv.ipython_config``

* Venv.py is a single file with only standard library imports,
  so that it works from ``$PATH`` and at IPython startup time:

  .. code:: bash

      # PATH_prepend "${__DOTFILES}/scripts"
      export PATH="~/-dotfiles/scripts:${PATH}"
      venv.py


.. command-output:: python ../scripts/venv.py --help
   :shell:



.. index:: Venv Python API
.. _venv python api:

----------------
Venv Python API
----------------
* A :py:mod:`dotfiles.venv.ipython_config.Venv` object
  has:

  * An :py:mod:`Env <dotfiles.venv.ipython_config.Env>`
    with fully-expanded ``$VIRTUAL_ENV``-relative paths
    in a prefixed standard filesystem hierarchy,
    environment variables for `CdAliases <CdAlias>`_
    and build scripts.
  * An ``OrderedDict`` of command and `CdAlias`_ aliases
  * Class methods for writing to JSON,
    Bash shell scripts with tab completion, strings

* A :py:mod:`Venv <dotfiles.venv.ipython_config.Venv>` object
  is built from a composition of
  :py:mod:`Step <dotfiles.venv.ipython_config.Step>`
  callables which transform
  an :py:mod:`Env <dotfiles.venv.ipython_config.Env>`
  (e.g. as "compiled" by a
  :py:mod:`dotfiles.venv.ipython_config.StepBuilder`).

  * A :py:mod:`StepBuilder <dotfiles.venv.ipython_config.StepBuilder>`
    builds a functional composition with diff-able snapshots/immutability and
    configurable *logging* (``venv.py --verbose --show-diffs``).

    * StepBuilder is inspired by :ref:`Makefiles <make>`
      but must work with escaped unicode strings (and e.g. :ref:`JSON-`)
      at IPython initiailization time,
      using only the CPython 2.6/7+ standard library,
      in a single file.

* A :py:mod:`Venv <dotfiles.venv.ipython_config.Venv>` object can be
  serialized to a number of formats:

  * ``--print-vars`` -- easy to read variables
  * ``--print-json`` -- quoted and escaped JSON
  * ``--print-bash`` -- quoted and escaped shell script
  * IPython configuration (DRY ``%alias`` and `CdAlias`_ definitions)

* There are ``unittest.TestCase`` tests in
  :py:mod:`dotfiles.venv.ipython_config` (`ipython_config.py`_)
  for Env, Venv, StepBuilder, and each of the included Step callables.

  * ``python venv.py -t`` to test.



.. index:: venv.sh
.. _venv.sh:

venv.sh
=========
| Src: https://github.com/westurner/dotfiles/blob/master/etc/venv/venv.sh

* venv.sh contains 
  :ref:`cdalias` functions to be ``source``-ed in at shell configuration time
  (e.g. ``./etc/bash/10-bashrc.venv.sh`` (``dotfiles_reload()`` (``dr()``))).


.. index:: venv_root_prefix.sh
.. _venv_root_prefix.sh:

venv_root_prefix.sh
=====================
| Src: https://github.com/westurner/dotfiles/blob/master/etc/venv/venv_root_prefix.sh

* venv_root_prefix.sh contains a default root prefix environment
  to be ``source``-ed in at shell configuration time
  (e.g. ``./etc/bash/10-bashrc.venv.sh`` (``dotfiles_reload()`` (``dr()``))).

.. code:: bash

    venv.py --print-bash --compress --prefix=/ \
        | grep -v '^export HOME=' \
        > ./etc/venv/venv_root_prefix.sh

* ``cdetc`` -> ``cd /etc``
* ``cdlog`` -> ``cd /var/log``
* ``cds``   -> ``cd /src`` (* ``__SRC``)
* ``cdwrk`` -> ``cd ~/-wrk``
* ``cdwh``  -> ``cd $WORKON_HOME``
* ``cdve``  -> ``cd $WORKON_HOME`` (``cdve dotfiles/etc/bash``)
* ``cdd``   -> ``cd $__DOTFILES``  (``cd ~/-dotfiles``)


.. index:: venv_ipymagics.py
.. _venv_ipymagics.py:

venv_ipymagics.py
===================
| Src: https://github.com/westurner/dotfiles/blob/master/src/dotfiles/venv/venv_ipymagics.py

* :ref:`CdAliases <cdalias>`
* ``dotfiles_status()`` (``ds()``)


.. index:: venv.vim
.. _venv.vim:

venv.vim
==========
| Src: git https://github.com/westurner/venv.vim
| Src: https://github.com/westurner/venv.vim/blob/master/plugin/venv.vim
| Src: https://github.com/westurner/dotfiles/blob/master/etc/venv/venv.vim

Venv.vim is a :ref:`Vim` plugin for defining
:ref:`CdAliases <cdalias>` like ``:Cdhelp``, ``:Cdwrk``, ``:Cdwrd``,
``:Cddotfiles`` (`:Cdd``).




.. index:: Venv Shell Configuration
.. _venv shell configuration:

Venv Shell Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~
``venv.py --print-bash --compress dotfilesx dotfilesx/docs``:

.. command-output:: python ../scripts/venv.py --print-bash --compress dotfilesx dotfilesx/docs \
   | sed "s,${HOME},~,g"
   :shell:

.. note:: The ``--compress`` option was initially written
   for documentation purposes;
   without this option, paths are expanded in full.


.. index:: Venv JSON
.. _venv json:

Venv JSON
~~~~~~~~~~~~~~~~~~~~~~~~~

Venv :ref:`JSON-` is useful for double-checking shell-escaping
and unicode.

``venv.py --print-json dotfiles``:

.. command-output:: python ../scripts/venv.py --print-json dotfilesx dotfilesx/docs \
   | python ../scripts/venv.py --compress dotfilesx dotfilesx/docs \
   | sed "s,${HOME},~,g"
   :shell:


Other scripts with venv-style paths
======================================
* :ref:`Venv paths` recur in most build scripts (often with different
  names)
* Venv paths are configurable at the commandline with :ref:`venv.py`,
  but any script can define a script environment just like venv:

.. code:: bash

   #!/bin/sh

   __WRK="${HOME}/-wrk"                          # cdwrk
   __DOTFILES="${HOME}/-dotfiles"                # cdd cddotfiles
   PROJECT_HOME="${__WRK}"                       # cdph cdprojecthome
   WORKON_HOME="${__WRK}/-ve27"                  # cdwh cdworkonhome

   CONDA_ROOT="${__WRK}/-conda27"                # $CONDA_ROOT__py27
   CONDA_ENVS_PATH="${__WRK}/-ce27"              # cdce cda cdcondaenvspath

   VIRTUAL_ENV_NAME="dotfiles"                   # 'dotfiles'
   _APP=$VIRTUAL_ENV_NAME                        # 'dotfiles[/p/a/t/h]'
   VIRTUAL_ENV="$WORKON_HOME/$VIRTUAL_ENV_NAME"  # cdv cdvirtualenv
   _SRC="${VIRTUAL_ENV}/src"                     # cds cdsrc
   _BIN="${VIRTUAL_ENV}/bin"                     # cde cdbin
   _ETC="${VIRTUAL_ENV}/etc"                     # cde cdetc
   _LOG="${VIRTUAL_ENV}/var/log"                 # cdl cdlog
   # ... see: venv.py --print-vars / ...
   _WRD="${_SRC}/{_APP}"                         # cdw cdwrd

   (set -x; test "$_WRD" == "${HOME}/-wrk/-ve27/dotfiles/src/dotfiles"; \
       || echo "Exception: _WRD = '${_WRD}';" )

.. code:: bash

    ### dotfiles.venv env variable naming style:
    # GLOBAL (ALL CAPS)
    # _VENVLOCAL    # VIRTUAL_ENV, _SRC, _WRD, _ETC, _LOG
    # __VENVGLOBAL  # __DOTFILES, __WRK, WORKON_HOME, CONDA_ENVS_PATH


See: :ref:`Venv paths` for a more complete table of :ref:`CdAliases
<cdalias>` and
:ref:`venv shell configuration` standard variable names.
