=========
Workflow
=========
Find simple workflows for productivity, efficiency, and collaboration.

.. contents::

Concept
========
::

   The morning question,  |  5 | Rise, wash, and address
                          |      *Powerful Goodness*;
   What good shall I do   |  6 | contrive day's business and take the
   this day?              |  7 | resolution of the day; prosecute the
                          |      present study; and breakfast.
                          |  8 -
                          |  9 | Work.
                          | 10 |
                          | 11 |
                          | 12 -
                          |  1 | Read or overlook my accounts, and
                          |      dine.
                          |  2 -
                          |  3 | Work.
                          |  4 |
                          |  5 |
                          |  6 -
                          |  7 | Put things in their places,
                          |      supper, music,
                          |  8 | or diversion, or conversation;
    Evening question,     |  9 | examination of the day.
    What good have I done | 10 -
    today?                | 11 |
                          | 12 |
                          |  1 | Sleep.
                          |  2 |
                          |  3 |
                          |  4 |

   -- Benjamin Franklin


Goals
=======
* Find simple workflows for productivity, efficiency, and collaboration
* Develop methods to retain and analyze relevant information
* Develop heuristics to identify tasks and sub-tasks


Objectives
-----------

* [ ] Document optimal workflows
* [x] Create ``workflow.rst`` (see: current headings)
* [ ] Develop file metadata strategies: (folders, names, tagging, labeling)
* [x] Synthesize existing labeling strategies
* [ ] Define and describe resources: skills, time, tools, tasks
* [ ] Define and describe outputs: artifacts, products, deliverables
* [ ] R&D: integrate workflow information flows

  * Tasks, Lists, Labels, Services, Tools (pyrtm-task-cli, pytodo?)
  * Logs: workhours, heka, elasticsearch, kibana

See: `Requirements Traceability`_


Tasks
======

Daily
------
* Daily Google Tasks list

  * Daily: Uncheck list box(es), update date


Scheduled
----------
* Google Calendar events (and reminders)


Recurring
-----------
* Repeating Google Calendar events (and reminders)
* Repeating ReadTheMilk tasks


Phone
-------
* While you were out stickies
* `Email Labels`_: ``.p``


Emails
-------
* `Email Labels`_: ``.tasks``, ``.tasks.done``


Text Files
------------
* ``README``, ``README.txt``, ``README.md``, ``README.rst``
* ``CHANGES``, ``CHANGES.txt``, ``CHANGES.md``, ``CHANGES.rst``
* ``CHANGELOG``, ``CHANGELOG.txt``, ``CHANGELOG.md``, ``CHANGELOG.rst``
* ``HISTORY``, ``HISTORY.txt``, ``HISTORY.md``, ``HISTORY.rst``
* ``TODO``, ``TODO.rst``, ``TODO.md``, ``TODO.html``
* ``index.html``, ``index.htm``

Lightweight Markup Syntax
~~~~~~~~~~~~~~~~~~~~~~~~~~
https://en.wikipedia.org/wiki/Lightweight_markup_language


Text File Headings
++++++++++++++++++++

ATX Headings (Markdown,)::

    # h1
    ## h2
    ### h3

Setext Headings (document-local ordering) (ReStructuredText, Markdown)

| https://docs.python.org/devguide/documenting.html#sections
| http://sphinx-doc.org/rest.html#sections

::

    #####
    part
    #####

    chapter
    ********

    section
    ========

    subsection
    -----------

    subsection
    ^^^^^^^^^^^

    paragraph
    """"""""""

See: https://github.com/westurner/rst-tools


Text File Attributes
~~~~~~~~~~~~~~~~~~~~~~
* Path: relative (``./path/to/file.ext``)
* Path: absolute (``/home/user/path/to/file.ext``)
* File extension (``.ext``)
* Filesystem attributes (``getfacl``, ``setfacl``)
* MIME-type (``file --mime``)
* Byte-order-marker (``file --mime``)
* Line endings (DOS, UNIX) (``Ctrl-V Ctrl-M``)
* Shebang line (``#!/bin/sh``, ``#!/usr/bin/env python``)
* Creation time (``stat``)
* Modification time (``stat``)
* Local undo/backup cache path

Source Code
-------------
https://en.wikipedia.org/wiki/Source_code

Source Code File Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* `Text File Attributes`_
* Path: repository-relative
* Repository revision hash id
* Repository path
* Repository remote URL(s)
* Repository file history log
* Repository file history log across renames

Source Code Comment Tags
+++++++++++++++++++++++++++
Comment tags::

    TODO
    FIXME
    XXX

.. code-block:: sh

   grep 'TODO|FIXME|XXX'
   grin 'TODO|FIXME|XXX'
   hg grep 'TODO|FIXME|XXX'
   git grep 'TODO|FIXME|XXX'


Patches
---------
Also referred to as a diff.

When an author has modified a file in a repository,
there is a difference (in terms of text lines and/or bytes changed)
between their local revision and
the repository revision they started with.
That's called a 'diff' or a 'patch'.

To share those changes, an author must submit a patch to
a repository maintainer, who is responsible for applying
or not applying the changes to a branch of a repository.

The patch review feedback cycle -- classically over NNTP or SMTP (email) --
can produce lots of text: both revisions to the patch and an
asynchronous stream of emails and IRC messages.

Patch attributes
~~~~~~~~~~~~~~~~~

* Header (first n chars of first line)
* Header
* Body (made of hunks)


Patch Workflow
~~~~~~~~~~~~~~~
* Send patch(es) as an email attachment ("a patch bomb")

  * TST,BLD,CLN: code and test an ENHancement or fix a BUG
  * DOC: write
  * DOC: prepend Code Labels to first line of patch header (commit message)
  * DOC: write a commit message
  * (.sent, .code) Open Loop: wait for feedback (add email label)
  * (pending) respond, revise, respond (add email labels)
  * (pending) correlate manual line references in feedback emails with
    the correct revision of the patch
  * (pending|accepted|rejected) review constructive feedback
  * (closed,done) Reach 'done'; update TODO system

* Receive patch(es) as an email attachment

  * (.unread) Open Loop: they're waiting for feedback
  * (.read) read, review, revise, respond: email, editor
  * (.tested) Test: run existing or documentation tests
  * (pending) Respond: [Email] Feedback
  * (pending|accepted|rejected) Evauluate: Apply or do not apply
  * (accepted) Update release log (Desire Code Labels)
  * (released) Release: issue a version identifier with merged patch
  * (closed,done) Reach 'done'; update TODO system

Forge
-------
`<https://en.wikipedia.org/wiki/Forge_(software)>`_


Issues
~~~~~~~~
https://en.wikipedia.org/wiki/Comparison_of_issue-tracking_systems

A finite request, report, or work item.

Also referred to as tickets, issues, or cards.

Issue attributes
++++++++++++++++++

* a title
* a description
* comments
* metadata

  * GitHub

    * title
    * body
    * user
    * assignee
    * state:

      * open
      * closed

    * milestone (configurable)
    * labels: (configurable)

      * bug
      * duplicate
      * enhancement
      * help wanted
      * invalid
      * question
      * wontfix

  * BitBucket

    * title (Title)
    * content (Description)
    * reported_by
    * assignee
    * follower_count
    * status:

      * new
      * open
      * resolved
      * on hold
      * invalid
      * duplicate
      * wontfix

    * kind:

      * bug
      * enhancement
      * proposal
      * task

    * priority:

      * trivial
      * minor
      * major
      * critical
      * blocker

    * component (configurable)
    * milestone (configurable)
    * version (configurable)

  * Google Code (configurable templates)

    * Summary
    * Description
    * Reporter
    * Attachments
    * Status: (configurable)

      * Open: (configurable)

        * New
        * Accepted
        * Started
        * MoreINFOneeded
        * NeedsTesting
        * Completed
        * PassedTesting

      * Closed: (configurable)

        * Fixed
        * Verified
        * Invalid
        * Duplicate
        * WontFix
        * Done

    * Owner
    * Cc
    * Labels: (configurable)

      * OpSys-*
      * Milestone-Release*
      * Component-*
      * Security
      * Performance
      * Usability
      * Maintainability


Code Hosting
~~~~~~~~~~~~~~
https://en.wikipedia.org/wiki/Comparison_of_open-source_software_hosting_facilities

* https://github.com/westurner/wiki/wiki/GitHub
* https://github.com/westurner/wiki/wiki/BitBucket


Collaborative Software
~~~~~~~~~~~~~~~~~~~~~~~~~
https://en.wikipedia.org/wiki/List_of_collaborative_software



Pull Requests
--------------
Projects hosted with GitHub and BitBucket generally support accepting,
reviewing, and merging changes as pull requests; which, like
regular patches people used to send over the email,
are hunks of differences between one or more files.

Unlike a patch archived in a mailing list,
pull requests have
a free-form comment stream
and line-based commenting
-- features which simplify the change review and evaluation feedback loop.


Send a Pull Request
~~~~~~~~~~~~~~~~~~~~~~

* Branch/fork, update, commit
* Compare, test (review diff)
* DOC: Prepend Code Labels to first line of patch header (commit message)
* Send a pull request 

   * Email: Send a URL to the branch to pull from (tags: ``.tasks``, ``.code``, ``-waiting``)
   * GitHub: Click 'Send Pull Request'
   * BitBucket: Click 'Send Pull Request'

* Open Loop: ``-waiting`` for feedback


Review a Pull Request
~~~~~~~~~~~~~~~~~~~~~~~
* Open Loop: they're waiting for feedback
* Read, ReviewTest*, Respond
* Check whether the tests pass with the pull request applied
* Apply or do not apply

   * Do Not Apply

     * Send feedback: not interested, needs work

   * Apply

     * Update release log (See: `<#code-labels>`__)
     * Commit
     * Push



Lists
======

Mental
-------
* Mnemonics
* String around one's finger
* Note on one's hand
* Cognitive representation (mental picture) of a list
* Graph with edges that have magnitude

Mental List Attributes
~~~~~~~~~~~~~~~~~~~~~~~
Context:

* Date
* Location
* Project


Paper
------

Pros
~~~~~
* Classic, ubiquitous
* Visual
* Battery-free

Cons
~~~~~
* Backup / collaboration strategy
* Correlating list status
* Keeping track of WHEN things were added/update/*renamed*/completed
* Assigning and sorting by priority

Implementations
~~~~~~~~~~~~~~~~~

Schedule
+++++++++
Chronological sequence of events

Calendar
++++++++++
Visual grid of day, week, month, quarter, year

Weekly views: ``M-Su``, ``Su-Sa``

Agenda
++++++++
Action items to accomplish within a given context

TODO List
++++++++++++
List of items to accomplish,
visually designating completion
by ``[x]`` checkmarks,
strikethrough (crossing things off)

Hipster PDA
+++++++++++++
Pocket-sized notebook sheet of paper

https://bitbucket.org/westurner/pyrtm-task-cli/src/tip/simp.py


Text
-----
Typed plaintext.  Usually with some form of lightweight markup for
lists, nested lists, bold, italic, [underline, strikethrough].

Stored with:

* Paper
* Filesystem
* VCS Repository (git, hg)

Pros
~~~~~
* Simple
* Great with a keyboard, syntax highlighting, and syntax checking

Cons
~~~~~
* Synchronicity: keeping everyone on the same revision of the page
* Mobile Interface: no
* Picking a syntax (try pandoc while deciding)
* Lightweight markup language syntax learning curve

Syntax
~~~~~~~
ReStructuredText, Markdown, [MediaWiki, BBCode, Textile]::

   * one
   * two
   * three

   - red
   - green
   - blue

Checkboxes
++++++++++++

ReStructuredText::

   * [x] one **bold**
   * [ ] two *italic*

     * [x] two.one
     - [ ] two.two \* two

   * [ ] ``three``

Markdown::

   * [x] one **bold**
   * [ ] two *italic*
     * [x] two.one
     * [ ] two.two \* two
   * [ ] ``three`` (also `three`)


Labels
=======

History
---------
* Text files
* First-line file naming
* PDA memos

Label Syntax
--------------
Personal labeling syntax

* ``lower case``
* ``dash-slugified``
* ``period.delimited``
* ``-task`` (``-next``, ``-waiting``, ``-someday``)
* ``@context`` (``@home``, ``@campus``, ``@work``)
* ``.project`` (``.project.subproject``)


Task Labels
---------------
::

   -next       a next action                    ( seeAlso: code: ready )
   -waiting    a task that is blocked
   -someday    an opportunity for a later date

https://en.wikipedia.org/wiki/Getting_Things_Done


Project Labels
----------------
See: https://github.com/westurner/wiki/wiki/projects

::

   .random        an unfiled note to self
   .d             degrees
   .d.<name>      degree course/project/team
   .bills         bills
   .career        career
   .civic         civic
   .health        health
   .diet          diet
   .exercise      exercise
   .relax         relax
   .ride          transportation

   .<projectname> project
   .dotfiles      dotfiles project


Context Labels
----------------
::

   @home    at home
   @travel  when traveling
   @campus  at school
   @class   in class    ( see: .d.<course> )
   @work    at work
   @phone   at the phone
   @pc      at a computer
   @online  at a computer with internet
   @email   checking email
   @forum   reading forums
   @read    having time for reading
   @food    buying food
   @list    general shopping list


Email Labels
-------------
::

   .tasks         tasks, action items
   .tasks/.daily  repeating daily tasks
   .tasks/.done   completed tasks

   b.
   b./b.ills
   b./b.rent
   b./b.svc
   b./b.uy
   c.ode         GitHub, BitBucket, SourceForge, Savannah (list: circle:#me)
   d.            degrees                     ( seeAlso: .d )
   d./d.<name>   degree course/project/team  ( seeAlso: .d.<course> )
   d./o.<org>    academic organizations
   p.            people / humans
   p./p.career   job offers, applications
   p./p.fam      family and friends
   p./p.self     from:me AND to:me
   p./p.sweb     social web
   l.            mailing lists
   l./l.art      art things
   l./l.biz      business
   l./l.music    music, concerts
   l./l.py       Python (list:python.org)
   l./l.semweb   semantic web
   o.<orgname>   organization
   wd.
   wd.<project>  web development

   @travel


Code Labels
------------
Code labels are three-letter codes with which commit messages can be prefixed.

::

    CODE Label          color name      background  text
    ---- -------------- --------------- ----------  -------
    BLD: build          light green     #bfe5bf     #2a332a
    BUG: bug            red             #fc2929     #ffffff  (github default)
    CLN: cleanup        light yellow    #fef2c0     #333026
    DOC: documentation  light blue      #c7def8     #282d33
    ENH: enhancement    blue            #84b6eb     #1c2733  (github default)
    PRF: performance    deep purple     #5319e7     #ffffff
    RLS: release        dark blue       #0052cc     #ffffff
    SEC: security       orange          #eb6420     #ffffff
    TST: test           light purple    #d4c5f9     #2b2833
    UBY: usability      light pink      #f7c6c7     #332829

    # Workflow Labels   (e.g. for waffle.io kanban board columns)
    ready               dark sea green  #006b75     #ffffff
    in progress         yellow          #fbca04     #332900

    # GitHub Labels
    duplicate           darker gray     #cccccc     #333333  (github default)
    help wanted         green           #159818     #ffffff  (github default)
    invalid             light gray      #e6e6e6     #333333  (github default)
    question            fuschia         #cc317c     #ffffff  (github default)
    wontfix             white           #ffffff     #333333  (github default)

    Note: All of these color codes (except for fuschia)
    are drawn from the default GitHub palette.

    Note: There are 17 labels listed here.

.. note:: For examples with color swatches in alphabetical order,
   see https://github.com/westurner/dotfiles/labels

Code Label Syntax
~~~~~~~~~~~~~~~~~~~

::

    ENH: Add new feature (#1)
    BUG: Fixes #3
    DOC: index.rst: Add readme.rst
    TST: Extend tests for #1
    BLD,CLN: Makefile: remove extra newlines

* ``COMMA,DELIMITED, SET: of prefix labels``
* Three-characters, if possible

Code labels are helpful for:

* working with issue tracking tagging and labeling systems
* aggregating changes into release logs (``HISTORY``)
* correlating changes with requirements
  (https://en.wikipedia.org/wiki/Requirements_traceability)
  [`Requirements Traceability`_]


-- adapted from `pandas/CONTRIBUTING.md <https://github.com/pydata/pandas/blob/master/CONTRIBUTING.md>`_



Services
==========
Web applications and web service
systems designed to track task state for one or more people
moving toward achieving objectives that satisfy the goals.

https://en.wikipedia.org/wiki/List_of_collaborative_software

Service Evaluation Criteria
----------------------------------
There is a spectrum between
"we'll remember which checkboxes for you"
and "this task is part of a project
supported by these people
in these roles
with these permissions."

* Web Interface: yes/link/no/date
* Mobile Interface: yes/link/no/date
* iOS App: yes/link/no/date
* Android App: yes/link/no/date
* BlackBerry App: yes/link/no/date
* WinMo App: yes/link/no/date
* API: yes/link/no
* XML: yes/link/no
* JSON: yes/link/no
* Sharing/Internal: yes/link/no
* Sharing/External: yes/link/no
* Integrates with Google Calendar: yes/link/no
* Integrates with Gmail: yes/link/no
* Integrates with Twitter: yes/link/no
* Integrates with Evernote: yes/link/no
* Integrates with GitHub: yes/link/no
* Cost/Free: yes/link/no
* Cost/Paid: yes/link/no
* Reminders/Pop-up: yes/link/no
* Reminders/Email: yes/link/no
* Tagging: yes/no


Google Calendar
-----------------
* Web Interface: https://google.com/calendar/
* Mobile Interface: https://www.google.com/calendar/m
* iOS App: yes
* Android App: yes
* BlackBerry App: no (EOL 2012)
* API: https://developers.google.com/google-apps/calendar/
* JSON: yes
* XML: yes


RememberTheMilk
------------------
* Web Interface: https://www.rememberthemilk.com/
* Mobile Interface:
* iOS App: yes
* Android App: yes
* BlackBerry App: yes
* API: https://www.rememberthemilk.com/services/api/
* XML: yes
* JSON: yes
* Integrates with Google Calendar: yes
* Integrates with Gmail: yes
* Integrates with Twitter: yes
* Integrates with Evernote: yes
* Tagging: yes (see: `Task Labels`_, `Project Labels`_, `Context Labels`_)


Google Tasks
-------------
* Integrates with Google Calendar: https://www.google.com/calendar/
* Web Interface: https://www.gmail.com/mail/help/tasks/
* Mobile Interface: https://www.gmail.com/mail/help/tasks/
* API: https://developers.google.com/google-apps/tasks/
* JSON: yes
* Tagging: no



Google Keep
------------
* Checkbox sticky notes
* Web Interface: https://drive.google.com/keep/
* Mobile Interface: yes
* API: no
* Sharing/Internal: yes
* Sharing/External: no
* Tagging: no



Wikis
-----
Roadmaps, Outlines

* GitHub Wiki
* BitBucket Wiki
* Trac Wiki
* MediaWiki


Mailing Lists
--------------
Email relay application server ("listserv")

GNU Mailman
~~~~~~~~~~~~~
| Homepage: https://www.gnu.org/software/mailman/
| Src: https://launchpad.net/mailman/3.0
| Docs: https://pythonhosted.org/mailman/
| Docs: https://pythonhosted.org/mailman/src/mailman/docs/WebUIin5.html

* Hosting: Self-hosted
* Cost: Free
* Language: Python
* Mailman 3 Web UI: Postorious (Django)

  * https://launchpad.net/postorius

* Tagging: no
* Lightweight Markup Languages: no
* Editing: no


Google Groups
~~~~~~~~~~~~~~~
| Homepage: https://groups.google.com/

* Hosting: Cloud
* Cost: Free
* Tagging: no
* Lightweight Markup Languages: no
* Editing: no

`<https://en.wikipedia.org/wiki/Electronic_mailing_list>`_


Forge Sites
-------------
Code Repository + Mailing List / Forums + Wikis + Downloads + Issue Tracking

`<https://en.wikipedia.org/wiki/Forge_(software)>`_

`<https://en.wikipedia.org/wiki/Comparison_of_open-source_software_hosting_facilities>`_

Examples:

* SourceForge
* GNU Savannah
* LaunchPad
* GitHub
* Bitbucket


Github Repos, Issues, Wikis
-----------------------------
* Free public Git repositories
* Web Interface: https://github.com/
* Mobile Interface: https://mobile.github.com/
* API: https://developer.github.com/v3/
* API note: most recent 1000 events
* XML: no
* JSON: yes
* Tagging: yes (issue labels: see `Code Labels`_)
* Language: Ruby

GitHub renders the first README {.md, .rst, .txt, } it finds.

GitHub ReStructuredText does not support Sphinx ReStructuredText.

Workflow
~~~~~~~~~
Ways to work with tasks and GitHub:

* [ ] Store a README, HISTORY, ROADMAP, TODO, etc. file in a repo {.md, .rst, .txt}
  ::

     1.  [ ] mkdir tasks && cd tasks
     2.  [ ] git init
     3.  [ ] echo "Tasks list" >> README.md
     4.  [ ] git diff README.md
     5.  [ ] git add README.md
     6.  [ ] git diff --cached README.md
     7.  [ ] git commit -m "DOC: Create tasks list"
     8.  [ ] git remote add origin ssh://git@github.com/<username>/<reponame>
     9.  [ ] Create a new github project named <reponame>
     10. [ ] git push origin master

  * Learn to git pull, diff, patch, merge, stash, push, and send pull requests
    (with a terminal interface)

    * `hub <http://hub.github.com/>`_ --
      a wrapper script for git that can be aliased with ``alias git=hub``
    * `gitflow <https://github.com/nvie/gitflow>`_ --
      adds ``git flow <command>``
      `branching workflow <https://datasift.github.io/gitflow/IntroducingGitFlow.html>`_
      automation commands.
    * `hubflow <https://github.com/datasift/gitflow>`_ --
      adds ``git hf <command>``
      branching workflow automation commands by extending gitflow.
    * see: https://westurner.github.io/dotfiles/tools.html#hubflow


* [ ] Create a GitHub Issue with a title and a description (Markdown) {.md}
  ::

     1. [ ] Open the GitHub url in the browser
     2. [ ] Click 'Issues'
     3. [ ] Click 'New Issue'
     4. [ ] Add a description "ENH: New Feature"
     5. [ ] Also select corresponding `<#code-labels>`__ 

  * Per-objective
  * Collaborators add labels, a milestone, and an assignee to the issue
  * Link to issues with ``#123`` in commit messages, issues, and wikis
  * Close the issue when it is done or not going to be done

    * Close a GitHub issue with the web interface 'Close' button
    * Close a GitHub issue with text in a **commit message** or **pull
      request description**::

         ENH: add new feature (closes: #01 #02)
         BUG: fix bug (fixes: #03)

      See: `Closing issues via commit messages <https://help.github.com/articles/closing-issues-via-commit-messages>`_


* [ ] Create a GitHub Issue with a GitHub Markdown Task List (Markdown) {.md}::

  * [ ] Add list items with checkboxes (``- [x] Task three``)

    - [x] one --bold--
    - [ ] two -italic-
      - [x] two.one
      - [ ] two.two \- two
    - [ ] ``three`` (also `three`)

  * [ ] Check off each checkbox to complete the issue

* [ ] Create a GitHub Wiki page w/ title and text (Markdown, ReST) {.md, .rest}

  * [ ] Create a Roadmap page with a sprint/release plan of issue number/links

* Publish Task Reports into a repository as HTML served by GitHub Pages

  * Create a Sphinx ReStructuredText ``conf.py``
  * Render the ReStructuredText into HTML with ``sphinx-build -b html``
  * Host ``_build/html`` in the ``gh-pages`` branch

    * e.g. with `<https://github.com/davisp/ghp-import>`_

  * Consider building and hosting Sphinx ReStructuredText documentation
    with `ReadTheDocs <https://readthedocs.org/>`_


BitBucket Repos, Issues, Wikis
---------------------------------
* Free public and private hg and git repositories
* Web Interface: https://bitbucket.org/
* Mobile Interface: Third Party
* Integration with Jira: Yes
* Integration with Crucible: yes
* API: https://bitbucket-api.readthedocs.org/en/latest/
* API note: http://restbrowser.bitbucket.org/
* XML: yes
* JSON: yes
* YAML: yes
* Tagging: yes (issue labels: see `Code Labels`_)
* Language: Python

Workflow
~~~~~~~~~~
* [ ] Store a README, HISTORY, ROADMAP, TODO, etc. file in a repo {.md, .rst, .txt}
  ::

     1. [ ] mkdir tasks && cd tasks
     2. [ ] hg init
     3. [ ] echo "Tasks list" >> README.md
     4. [ ] hg add README.md
     5. [ ] hg diff README.md
     6. [ ] hg commit -m "DOC: Create tasks list"
     7. [ ] Add "bb = ssh://hg@bitbucket.org/${USERNAME}/${REPONAME}" to ``[paths]`` in ./.hgrc
     8. [ ] Create a new bitbucket repository named REPONAME
     8. [ ] hg push bb

  * Learn to hg pull, diff, patch, merge, shelve, push, and send pull requests

    * `mq <http://mercurial.selenic.com/wiki/MqExtension>`_ --
      a mercurial extension for working with Mercurial Patch Queues
    * `tortoisehg <http://tortoisehg.bitbucket.org/>`_ --
      an excellent VCS gui for Mercurial (and git, with hg-git)


* [ ] Create a BitBucket Issue with a title and a description (Markdown) {.md}
  ::

     1. [ ] Open the BitBucket url in the browser
     2. [ ] Click 'Issues'
     3. [ ] Click 'Create Issue'
     4. [ ] Add a description "ENH: New Feature"
     5. [ ] Also select corresponding `<#code-labels>`__ 

  * Per-objective
  * [ ] Apply kind and priority values to the issue with the web interface
  * [ ] Collaborators may assign an issue to a specific user
  * [ ] Link to issues with ``#123`` in commit messages, issues, and wikis
  * [ ] Close the issue when it is done or not going to be done

    * Close a BitBucket issue with the 'Resolve' button
    * Close a BitBucket issue with text in a patch header
      (a **commit message** or **pull request description**)::

         ENH: add new feature (closes: #01 #02)
         BUG: fix bug (fixes: #03)

      See: `Resolve issues automatically when users push code <https://confluence.atlassian.com/display/BITBUCKET/Resolve+issues+automatically+when+users+push+code>`_

* [ ] Create Pull Request Tasks: http://blog.bitbucket.org/2014/09/16/introducing-pull-request-tasks/


Trac
-----

| Wikipedia: https://en.wikipedia.org/wiki/Trac
| Homepage: http://trac.edgewall.org/
| Src: https://hg.edgewall.org/trac/mirror/

* http://trac.edgewall.org/wiki/TracDev
* https://trac-hacks.org/


Redmine
--------
| Wikipedia: https://en.wikipedia.org/wiki/Redmine
| Homepage: http://www.redmine.org/
| Src: https://github.com/redmine/redmine


GitLab
-------
| Homepage: https://about.gitlab.com/
| Src: https://github.com/gitlabhq/gitlabhq


Tools
=======

pyrtm-task-cli
---------------
| Src: https://bitbucket.org/westurner/pyrtm-task-cli

A python CLI for working with tasks and pyrtm RememberTheMilk API.

Query/rename tasks in Python and generate a printable, minimal HTML
Hipster PDA from a template.

workhours
----------
| Src: https://bitbucket.org/westurner/workhours

Aggregate streams of event tuples generated by various activity streams
(bookmarks, existing browser history, ``.usrlog`` files)


TaskWarrior
-------------
| Wikipedia: https://en.wikipedia.org/wiki/Taskwarrior
| Homepage: http://taskwarrior.org/
| Src: https://git.tasktools.org/scm/tm/task.git

TaskWarrior is a task management tool written in C with lots of plugins
written in other languages.

TaskWarrior comes with an awesome commandline interface for adding,
updating, and reporting on tasks, their statuses, and their priorities.

There are plugins to host and synchronize TaskWarrior task databases.


Best Practices
============================
Project Templating
--------------------
- [ ] Generate a new project with templated packaging and documentation
  (e.g. with `<https://github.com/audreyr/cookiecutter>`_)


Requirements Traceability
---------------------------

- [ ] Write a Roadmap wiki entry with links to Release Plans
  and/or issue milestones
  (`<git@github.com:westurner/wiki.wiki.git>`_ / ``Roadmap.rest``)

  * Roadmap wiki page: https://github.com/westurner/wiki/wiki/Roadmap
  * Milestone: https://github.com/westurner/wiki/milestones/0.1

- [ ] Write Features and *User Stories* as issues prefixed with ``ENH:``::

      ENH: Users can place orders

- [ ] Prefix commit messages with `Code Labels`_::

      TST: Create order placing tests
      DOC: Add order placing documentation
      BLD: Update the build configuration

- [ ] Link between **Issues**, **Commits**, **Pull Requests**, and
  *Release Logs* by referencing an issue number::

      TST: Create order placing tests (#123)
      DOC: Add order placing documentation (for #123)
      CLN: Cleanup syntax for style guide (#5678)

- [ ] Link between **Issues**, **Commits**, **Pull Requests**, and
  *Release Logs* by referencing (pasting) a link (URL, URI)
  as-is (with no anchor text)::

      https://github.com/westurner/wiki/issues/1


Revision Control
-----------------

- [ ] Utilize Git HubFlow
  (`<https://datasift.github.io/gitflow/>`_,
  for managing project repository branches:
  ``develop``, ``master``, ``feature/*``, ``release/*``, ``hotfix/*``
- [ ] Release semantic versions (`<http://semver.org>`_) tagged as
  ``major.minor.patch`` (e.g. ``v1.0.01``)


Continuous Integration
-------------------------
https://en.wikipedia.org/wiki/Continuous_integration#Best_practices

- [ ] Tag builds of versions and their artifacts with short commit ids
  and conda selectors: `<http://conda.pydata.org/docs/build.html#preprocessing-selectors>`_
  (e.g. ``v1.0.01-eb4df7f-linux64``)
