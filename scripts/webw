#!/bin/sh
## 

function webw() {
    (set -x; _webw_ ${@}; return)
    return
}

function webw_set_facls() {

    (umask 0026; mkdir -p ${_VARLOG} || true)
    chmod go-rw ${_VARLOG}
    (umask 0026; mkdir -p ${_VARCACHE} || true)
    chmod go-rw ${_VARCACHE}
    (umask 0026; mkdir -p ${_VARCACHE_WEBW} || true)
    chmod go-rw ${_VARCACHE_WEBW}
    (umask 0026; mkdir -p ${userdatadir} || true)
    chmod go-rw ${userdatadir}
}

function _setup_webw () {


    profiledirectory=${1:-${profiledirectory:-"Profile 1"}}
    #profiledirectory=${1:-${profiledirectory:-"Default"}}

    # Set
    if [ -n "${__IS_MAC}" ]; then
        CHROME_BIN=(/usr/bin/open --wait-apps --new -b com.google.Chrome --args)
        SEDOPTS="-i'' -e"
        userdatadir="${HOME}/Library/Application Support/Google/Chrome"
    else
        CHROME_BIN=("${CHROME_BIN:-"/usr/bin/google-chrome"}")
        SEDOPTS="-i"
        userdatadir="${HOME}/.config/google/chrome"
    fi

    _HOME="${_HOME:-"${VIRTUAL_ENV:+"${VIRTUAL_ENV}/home"}"}"
    if [ -n "${_HOME}" ]; then
        userdatadir="${_HOME}/${_APP}/.config/google/chrome"
    fi

    CHROME_PROFILE_PATH=${userdatadir}/${profiledirectory}

    ###
    
    # Force Chrome to resolve DNS over SOCKS v5 (or NOT_FOUND)
    set -f
    hostresolverrules="${hostresolverrules:-'MAP * 0.0.0.0'}"
    if [ -z "${PROXY_IP}" ]; then
        PROXY_SOCKS_SERVER="${PROXY_HOST}:${PROXY_PORT}"
        proxyserver_="socks5://${PROXY_HOST}:${PROXY_PORT}"
        # If DNS is required to lookup the proxy server, EXCLUDE that fqdn
        if [ -n "${PROXY_HOST}" ]; then
            hostresolverrules="${hostresolverrules} EXCLUDE ${PROXY_HOST}"
        fi
    else
        PROXY_SOCKS_SERVER="${PROXY_IP}"
        proxyserver_="socks5://${PROXY_IP}:${PROXY_PORT}"
    fi
    proxyserver="${proxyserver:-${proxyserver_}}"

    echo hostresolverrules="${hostresolverrules}"

    HOMEPAGE='about:blank'
    ISO_DATETIME="$(date +'%F %T%z')"
    HOMEPAGE_TITLE="#${VIRTUAL_ENV_NAME} (${ISO_DATETIME})"
    printf -v HOMEPAGE "data:text/html, <html style=\"font-family:Helvetica; background: #333; width: 400px; margin: 0 auto; color: white;\" contenteditable><title>${HOMEPAGE_TITLE}</title><p style=\"color: white;\"><br>${HOMEPAGE_TITLE}<br>.</p>\n"

    CHROME_ARGS__=(
    "${CHROME_BIN[@]}"
    --proxy-server="${proxyserver}"
    --host-resolver-rules=\"${hostresolverrules}\"
    --dns-prefetch-disable
    --learning
    --profile-directory=\"${profiledirectory}\"
    --no-default-browser-check
    --disable-java
    --disable-icon-ntp
    --no-pings
    --homepage="about:blank"
    --user-data-dir="${userdatadir}"
    --no-referrers
    )

    # echo CHROME_ARGS__="${CHROME_ARGS__[@]}"

    # #disable-hyperlink-auditing=enable
    # #disable-javascript-harmony-shipping
    # #enable-devtools-experiments=enable
    # #enable-md-settings
    # #enable-site-per-process=disabled
    # #enable-tab-audio-muting
    # #enable-website-settings-manager=enable
    # #enhanced-bookmarks-experiment=disabled
    # #extension-content-verification=
    # #ignore-gpu-blacklist
    # #mark-non-secure-as=dubious
    # #remember-cert-error-decisions=1d,3d,1w,1m,3m
    # #save-page-as-mhtml=enable
    # #ssl-version-min
    #
    # linux:
    # #enable-smooth-scrolling
                
    #URI=about:blank
    #URI=
    #URI=chrome://history
    #URI="${HOMEPAGE}"

    _VARCACHE=${_VARCACHE:-${VIRTUAL_ENV:+"${VIRTUAL_ENV}/var/cache"}}
    _VARCACHE=${_VARCACHE:-"."}
    _VARLOG=${_VARLOG:-${VIRTUAL_ENV:+"${VIRTUAL_ENV}/var/log"}}
    _VARLOG=${_VARLOG:-"."}
    _VARCACHE_WEBW="${_VARCACHE}/chrome"
    _VARCACHE_WEBW=${_VARCACHE_WEBW:-"."}
    _VARRUN=${_VARRUN:-${VIRTUAL_ENV:+"${VIRTUAL_ENV}/var/run"}}
    _VARRUN="${_VARRUN:-'.'}"

    WEBW_PID_FILE=${WEBW_PID_FILE:-"${_VARCACHE_WEBW}/webw.pid"}

}


function _comment_prefix() {
    (set +x; sed 's/^\(.*\)$/# \1/g')
    return
}

function webw_status () {
    _setup_webw
    if [ -f "${WEBW_PID_FILE}" ]; then
        WEBW_PID=$(cat "${WEBW_PID_FILE}")
    fi
    # printf "WEBW_PROXY_PORT=%d\n" "${WEBW_PROXY_PORT}" 
    printf "WEBW_PID=%d\n" "${WEBW_PID}"
    if [ -n "${WEBW_PID}" ]; then
        echo "# {"
        (set -x; ps -p "${WEBW_PID}" 2>&1 | _comment_prefix)
        echo "# }"
    fi
}

function webw_check() {
    _setup_webw

    local chrome_bin="${CHROME_BIN[@]}"
    if [ -n "${__IS_MAC}" ]; then
        chrome_bin="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
    fi
    echo CHROME_BIN="${chrome_bin}"; # TODO: shellescape
    echo CHROME_PROFILE_PATH="${CHROME_PROFILE_PATH}"; # TODO: shellescape
    (set -x;
    "${chrome_bin}" --version 2>&1;
    ls -ld "${CHROME_PROFILE_PATH}";
    ) | _comment_prefix
    webw_status
}

function webw_start () {

    # TODO: PROXY_HOST, PROXY_IP, PROXY_PORT

    #  $1 (str)     -- WEBW_USERHOST
    #  $2 (str)     -- WEBW_RPORT 
    #                   Default: 1080
    #  $3 (str)     -- WEBW_LOCADDR (ip addr to bind server to)
    #                   Defaults:
    #                      Mac: 127.0.0.1
    #                      Linux: 10.10.10.10

    #WEBW_USERHOST=${1:-${WEBW_USERHOST}}
    #if [ -z "${WEBW_USERHOST}" ]; then
    #    echo "Err: WEBW_USERHOST unspecified"
    #    echo "WEBW_USERHOST='user@host -p 22'"
    #    return 1
    #fi
    _setup_webw
    _webw_
    webw_status
}

function webw_stop () {
    _setup_webw
	test -f ${WEBW_PID_FILE}
    if [ -f "${WEBW_PID_FILE}" ]; then
        kill -9 $(cat "${WEBW_PID_FILE}") || true
        rm ${WEBW_PID_FILE}
    fi
	webw_set_facls
    webw_status
}

function shell_escape_double() {
    sed 's/"/\\"/g'
}

function _webw_ () {
    #  webw()         -- Open a SOCKS SSH session
    #  $1 (str)     -- WEBW_USERHOST
    #  $2 (str)     -- WEBW_RPORT 
    URI="'${1:-${HOMEPAGE}}'"
    _setup_webw
    webw_set_facls
    date +'%F %T%z'
    echo "CHROME_PROFILE_PATH='${CHROME_PROFILE_PATH}'"

    local wrd="." # TODO: _HOME, 

    IFS=""
    local chrome_args=(
        "${CHROME_ARGS__[@]}"
        "${URI}"
    )
    printf -v cmd "%s " "${chrome_args[@]}"
    #printf "cmd=%s\n" "${cmd}"
    if [ -n "${_VARLOG}" ]; then
        (
            cd "${wrd}" &&
            (
                (
                    set -x;
                    eval "${cmd}" \
                        | tee "${_VARLOG}/webw.log"
                ) & 
                _WEBW_PID=$!
                echo "${_WEBW_PID}" > ${WEBW_PID_FILE} ;
                cat ${WEBW_PID_FILE} ; 
            )
        )
    else
        (
            cd "${wrd}" && (
                set -x;
                eval "${cmd}" &
                _WEBW_PID=$!
                echo "${_WEBW_PID}" > ${WEBW_PID_FILE} ;
                cat ${WEBW_PID_FILE};
            )
        )
    fi

    _WEBW_RETVAL=$?
    _WEBW_PID=$!
    echo "_WEBW_PID=${1}" | tee ${_VARRUN}/webw.pid
    return $_WEBW_RETVAL
}

function webw_usage () {
    echo "# $0"
    local cmdname=$(basename ${0})
    echo "Usage: ${cmdname} [start|stop|check|status] [-h]"
    echo ""
    echo "    ${cmdname} start"
    echo "    ${cmdname} status"
    #echo "    ${cmdname} stop-all"
    echo "    ${cmdname} check"
    echo ""
    echo "  -s,start   --  start the ${cmdname} process"
    #echo "  -p,stop    --  stop the ${cmdname} process"
    echo "  -c,check   --  check the ${cmdname} process"
    echo "  -u,status  --  check the ${cmdname} process"
    echo ""
    echo "  -h  --  help"
    echo ""
}

function webw_parse_opts () {
    case "${1}" in
        s|S|start|open)
            _webw_opts_start=true
            ;;
        p|P|stop|close)
            _webw_opts_stop=true
            ;;
        c|C|check)
            _webw_opts_check=true
            ;;
        u|U|status)
            _webw_opts_status=true
            ;;
        h|H|help)
            _webw_opts_help=true
            ;;
    esac
}

function webw_main () {

    while getopts "osScpPChH" opt; do
        webw_parse_opts "${opt}"
    done

    for arg in "${@}"; do
        webw_parse_opts "${arg}"
    done

    haverunacmd=
    if [ -n "${_webw_opts_start}" ]; then
        webw_start
        haverunacmd=true
    fi
    if [ -n "${_webw_opts_stop}" ]; then
        webw_stop
        haverunacmd=true
    fi
    if [ -n "${_webw_opts_check}" ]; then
        webw_check
        haverunacmd=true
    fi
    if [ -n "${_webw_opts_status}" ]; then
        webw_status
        haverunacmd=true
    fi
    if [ -n "${_webw_opts_help}" ] || [ -z "${haverunacmd}" ]; then
        webw_usage
    fi
}

if [ "${BASH_SOURCE}" == "${0}" ]; then
    webw_main ${@}
    exit
fi
