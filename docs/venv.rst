
Venv
======
``./etc/ipython/profile_default/ipython_config.py``

Enhancements to :ref:`virtualenvwrapper` for :ref:`Bash`_, :ref:`ZSH`_, and :ref:`IPython`_.

Venv functionality is defined in two places:

* `10-bashrc.venv.sh <https://github.com/westurner/dotfiles/blob/master/etc/bash/10-bashrc.venv.sh>`_
* `ipython_config.py
  <https://github.com/westurner/dotfiles/blob/master/etc/ipython/ipython_config.py>`_, which generates shell env:

.. code-block:: bash

    export
    alias

    echo $_VENV
    cat $_VENV
    #> omitted for readability

    venv -E --bash
    source <(venv -E --bash)

    export
    alias


**Features**

* Configures `Python`_ ``site`` for a given `virtualenv`
* Configures `Python`_ ``sys.path``: `IPython`_ extension paths
* Configures `IPython`_ command aliases (``%alias``, or just ``alias``)
* Generates `Bash`_ environments from `virtualenv` paths
* Configures `Bash`_ variables starting with ``$_``
* Executes subcommands within generated environments (``venv -x bash``)

**Usage**

Create a virtualenv (**virtualenvwrapper**)::

    mkvirtualenv dotfiles
    workon dotfiles
    pip install -e https://bitbucket.org/westurner/dotfiles

Work on a project::

    we dotfiles

List current environment settings::

    venv -E --bash

Generate environment settings for an environment::

    venv dotfiles --bash

Execute a command within an environment::

    venv dotfiles -x gnome-terminal

The ``we`` command adds a ``_venv`` alias to ``venv -E``,
so the following commands are equivalent::

    venv -E --print
    venv dotfiles --print
    _venv --print
    _venv dotfiles --print
    $_VENV -E --print
    $_VENV dotfiles --print

List Venv-generated Venv variables, aliases, and commands with::

    venv -E --bash

Paths should be contained within ``${VIRTUAL_ENV}``, which is set by
``virtualenvwrapper`` through a call to ``workon``::

    echo ${VIRTUAL_ENV}
    #
    workon dotfiles
    echo ${VIRTUAL_ENV}
    # ~/.virtualenvs/dotfiles
    echo ${_WRD}
    #
    source <(venv -E --bash)
    echo ${_WRD}
    # ~/.virtualenvs/dotfiles/src/dotfiles
    echo ${_APP}
    # dotfiles


Python API
~~~~~~~~~~~~
A Venv object builds an ``Env`` with ``${VIRTUAL_ENV}``-relative paths
in a common filesystem hierarchy and an ordered dictionary of
command aliases, which can be serialized to
a bash script (``venv --bash``) or to JSON (``venv --print``).

.. code-block:: python

    import Venv, json
    venv = Venv(from_environ=True)
    venv.print()
    venv.bash_env()

    venv.configure_sys()
    venv.configure_ipython()

    assert venv.virtualenv  == venv.env['VIRTUAL_ENV']
    assert venv.appname     == venv.env['_APP']

    print(venv.env['_WRD'])     # working directory
    #> ~/.virtualenvs/dotfiles

    print(venv.aliases['_edit'])
    #> gvim --servername dotfiles --remote-tab

    print(venv.env['_EDIT_'])
    #> gvim --servername dotfiles --remote-tab


Command Aliases
-----------------
.. note:: Many of the aliases generated by `Venv` are also defined in
    ``bashrc.venv.sh``.


cd Aliases
~~~~~~~~~~~~~~
**cdb**::

    cd $_BIN
    # cdvirtualenv bin

**cde**::

    cd $_ETC
    # cdvirtualenv etc

**cdpylib**::

    cd $_PYLIB
    # cdsitepackages ..

**cdpysite**::

    cd $_PYSITE
    # cdsitepackages

**cds**::

    cd $_SRC
    # cdvirtualenv src

**cdv**::

    cd $VIRTUAL_ENV
    # cdvirtualenv

**cdvar**::

    cd $_VAR
    # cdvirtualenv var

**cdve**::

    cd $WORKON_HOME

**cdw**::

    cd $_WRD
    # cdvirtualenv src/${_APP}
   
**cdww**::

    cd $_WWW
    # cdvirtualenv var/www

**cdhelp**::

    set | grep '^cd.*()' | cut -f1 -d' ' 

gvim
~~~~~~~~~~~~~~~~~
**_edit**
    ``gvim --servername=${_APP} --remote-tab``

**_editp**::
    ``_edit {README,setup.py,...}``


grin
~~~~~~~~~~~~~~
**grin --help**::

    grin --help
    grind --help
    grin[d] --help

**grin[d]v**::

    grin[d] ${VIRTUAL_ENV}

**grin[d]s**::

    grin[d] ${_SRC}

**grin[d]w**::

    grin[d] ${_WRD}

