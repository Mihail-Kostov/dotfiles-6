#### etc/bash/00-bashrc.before.sh
#
## 00-bashrc.before.sh
#
#### source ~/.bashrc
###  > source etc/bash/*-bashrc.*.sh
##     > source 00-bashrc.before.sh  # <-- THIS FILE
#
    ## dotfiles_reload()    -- (re)load the bash configuration tree
    #                          from ${__DOTFILES}/etc/bash
    #  __DOTFILES (str)     -- path to this dotfiles repository (~/.dotfiles)
      #
      ## 01-bashrc.lib.sh  -- libraries: useful bash functions
      #  detect_platform() -- set __IS_MAC__IS_LINUX vars [01-bashrc.lib.sh]
      #                       egrep -nr -C 3 '__IS_MAC|__IS_LINUX'
      #
      ## 03-bashrc.readline.sh  -- readline
      #
      ## 04-bashrc.TERM.sh      -- set $TERM and $CLICOLOR
      #
      ## 05-bashrc.dotfiles.sh  -- dotfiles
      #  $__DOTFILES (str): path to local dotfiles repository clone
      #  dotfiles_status(): print dotfiles env config
      ##
      ### python: python: pip, virtualenv, virtualenvwrapper
      #  $PROJECT_HOME (str): path to project directory (~/wrk)
      #  $WORKON_HOME  (str): path to virtualenvs directory (~/wrk/.ve)
      #  $VIRTUAL_ENV  (str): path to current $VIRTUAL_ENV
      #
      ## 07-bashrc.python.sh            -- python
      #  _setup_anaconda()      -- setup anaconda paths (manual)
      #  _setup_pyenv()         -- setup pyenv paths (manual)
      #
      ## 07-bashrc.virtualenv.sh        -- virtualenv
      #
      ## 07-bashrc.virtualenvwrapper.sh -- virtualenvwrapper
      #
      ## 08-bashrc.gcloud.sh    -- gcloud: Google Cloud SDK
      #  _setup_google_cloud()  -- setup google cloud paths
      #
      ## 10-bashrc.venv.sh      -- venv: virtualenvwrapper extensions
      #  $_VENVNAME (str): name of current $VIRTUAL_ENV
      #  we() -- workon a new venv (source bin/activate; update ENVIRON)
      #          we() -> workon $1 [$_APP] && source <($_VENV --bash $@)
      #          example::
      #             we dotfiles
      #             we dotfiles etc/bash; ls -al; git status
      # test -f $__PROJECTS && source $__PROJECTS
      # dotfiles_status
      #
      ## 11-bashrc.venv.pyramid.sh  -- venv-pyramid: pyramid-specific config
      #
      ## 20-bashrc.editor.sh        -- $EDITOR configuration
      #  $_EDIT_ (str): cmdstring to open $@ (file list) in current editor
      #  $EDITOR (str): cmdstring to open $@ (file list) in current editor
      ## 20-bashrc.vimpagers.sh     -- $PAGER configuration
      #  $PAGER (str): cmdstring to run pager (less/vim)
      #
      ## 30-bashrc.usrlog.sh        -- $_USRLOG configuration
      #  $_USRLOG (str): path to .usrlog command log
      #  stid           -- set $TERM_ID to a random string
      #  stid $name     -- set $TERM_ID to string
      #  note           -- add a dated note to $_USRLOG [_usrlog_append]
      #  usrlogv        -- open usrlog with vim:   $VIMBIN + $_USRLOG
      #  usrlogg        -- open usrlog with gmvim: $GUIVIMBIN + $_USRLOG
      #  usrloge        -- open usrlog with editor:$EDITOR + $_USRLOG
      ## 30-bashrc.xlck.sh          -- screensaver, (auto) lock, suspend
      ## 40-bashrc.aliases.sh       -- bash aliases and cmds
      ## 50-bashrc.bashmarks.sh     -- bashmarks: local bookmarks
      ## 70-bashrc.repos.sh         -- repos: $__SRC repos, docs
    ### 99-bashrc.after.sh          -- after: cleanup
    ## dr               -- dotfiles_reload
   
   
#### etc/bash/01-bashrc.lib.sh
    #  add_to_path  -- prepend a directory to $PATH
    ## instead of:
    ##   export PATH=$dir:$PATH
    ##
    ##   add_to_path $dir 
    #  lightpath    -- display $PATH with newlines
    #  lspath       -- list files in each directory in $PATH
    #  lspath_less  -- lspath with less
    #   echo_args   -- echo $@ (for checking quoting)
    #  pypath       -- print python sys.path and site config
   
   
#### etc/bash/03-bashrc.readline.sh
### bashrc.readline.sh
#  vi-mode: vi(m) keyboard shortcuts
    #  .         -- insert last argument (command mode)
    ## emulate default bash
    #  <ctrl> l  -- clear screen
    #  <ctrl> a  -- move to beginning of line (^)
    #  <ctrl> e  -- move to end of line ($)
    #  <ctrl> w  -- delete last word
   
   
#### etc/bash/04-bashrc.TERM.sh
## bashrc.TERM.sh       -- set TERM [man terminfo]
    ## configure_TERM   -- configure the $TERM variable
    # configure_term [#term] -- screen, xterm, 
            # tmux
            # screen
            # zsh+tmux: oh-my-zsh/plugins/tmux/tmux.plugin.zsh
    ## configure_TERM_CLICOLOR  -- configure $CLICOLOR and $CLICOLOR_256
    #  CLICOLOR=1   # ls colors
    #  CLICOLOR_256=1
    # export CLICOLOR_256=$CLICOLOR
### Configure term when sourcing bashrc.TERM.sh
   
   
#### etc/bash/05-bashrc.dotfiles.sh
### bashrc.dotfiles.sh
    ## dotfiles_add_path    -- Add ${__DOTFILES}/scripts to $PATH
#
# See etc/bash/05-bashrc.dotfiles.sh
## dotfiles_status()        -- print dotfiles_status 
    #  dotfiles_status()    -- print dotfiles_status
    #  ds                   -- print dotfiles_status
    # log_dotfiles_state    -- save current environment to logfiles
    ## dotfiles_initialize()  -- virtualenvwrapper initialize
    ## dotfiles_preactivate()  -- virtualenvwrapper preactivate
    ## dotfiles_postactivate()  -- virtualenvwrapper postactivate
    ## dotfiles_predeactivate()  -- virtualenvwrapper predeactivate
    ## dotfiles_postdeactivate()  -- virtualenvwrapper postdeactivate
    # __DOTFILES='/Users/W/.dotfiles'
    # __DOCSWWW=''
    # __SRC='/Users/W/src'
    # __PROJECTSRC='/Users/W/wrk/.projectsrc.sh'
    # PROJECT_HOME='/Users/W/wrk'
    # WORKON_HOME='/Users/W/wrk/.ve'
   
   
#### etc/bash/07-bashrc.python.sh
# Generate python cmdline docs::
#
#    man python | cat | egrep 'ENVIRONMENT VARIABLES' -A 200 | egrep 'AUTHOR' -B 200 | head -n -1 | pyline -r '\s*([\w]+)$' 'rgx and rgx.group(1)'
    ## _setup_python() -- configure $PYTHONSTARTUP
    ## _setup_pip()     -- set $PIP_REQUIRE_VIRTUALENV=false
    ## _setup_pyvenv()  -- set $PYENV_ROOT, add_to_path, and pyenv venvw
    ## _setup_anaconda  -- set $ANACONDA_ROOT, add_to_path
    #  workon_conda()    -- workon a conda + venv project
    #  wec()              -- workon a conda + venv project
    #  mkvirtualenv_conda() -- mkvirtualenv and conda create
    #  rmvirtualenv_conda() -- rmvirtualenv conda
   
   
#### etc/bash/07-bashrc.virtualenv.sh
   
   
#### etc/bash/07-bashrc.virtualenvwrapper.sh
## Virtualenvwrapper
# sudo apt-get install virtualenvwrapper || easy_install virtualenvwrapper
    ## _setup_virtualenvwrapper -- configure $VIRTUALENVWRAPPER_*
    ## lsvirtualenv()   -- list virtualenvs in $WORKON_HOME
    ## lsve()           -- list virtualenvs in $WORKON_HOME
   
   
#### etc/bash/08-bashrc.gcloud.sh
    #  _setup_google_cloud  -- configure PATH and bash completions for
    #   Google Cloud"
    # The next line updates PATH for the Google Cloud SDK.
    # The next line enables bash completion for gcloud.
   
   
#### etc/bash/10-bashrc.venv.sh
## .bashrc.venv.sh
#
# sh configuration
# intended to be sourced from (after) ~/.bashrc
## Variables
    # __PROJECTSRC -- path to local project settings script
    # __SRC        -- path/symlink to local repository ($__SRC/hg $__SRC/git)
    # PATH="~/.local/bin:$PATH" (if not already there)
    # _VENV       -- path to local venv config script (executable)
## Functions
    # venv <args>  -- call $_VENV $@
    # _venv <args> -- call $_VENV -E $@
    # we()         -- workon a virtualenv and load venv
    #  param $1: $VIRTUAL_ENV_NAME ("dotfiles")
    #  param $2: $_APP ("dotfiles") [default: $1)
    #   ${WORKON_HOME}/${VIRTUAL_ENV_NAME}  # == $VIRTUAL_ENV
    #   ${VIRTUAL_ENV}/src                  # == $_SRC
    #   ${_SRC}/${VIRTUAL_ENV_NAME}         # == $_WRD
    #  examples:
    #   we dotfiles
    #   we dotfiles dotfiles
    # append to shell history
        # if no arguments are specified, list virtual environments
## CD shortcuts
    # cdb      -- cd $_BIN
    # cde      -- cd $_ETC
    # cdv      -- cd $VIRTUAL_ENV
    # cdve     -- cd $WORKON_HOME
    # cdvar    -- cd $_VAR
    # cdlog    -- cd $_LOG
    # cdww     -- cd $_WWW
    # cdl      -- cd $_LIB
    # cdpylib  -- cd $_PYLIB
    # cdpysite -- cd $_PYSITE
    # cds      -- cd $_SRC
    # cdw      -- cd $_WRD
    # cdwrk     -- cd $WORKON_HOME
## Grin search
# virtualenv / virtualenvwrapper
    # grinv    -- grin $VIRTUAL_ENV
    # grindv   -- grind $VIRTUAL_ENV
# venv
    # grins    -- grin $_SRC
    # grinds   -- grind $_SRC
    # grinw    -- grin $_WRD
    # grindw   -- grind $_WRD
    # grindctags   -- generate ctags from grind expression (*.py by default)
    # _loadaliases -- load shell aliases
   
   
#### etc/bash/11-bashrc.venv.pyramid.sh
    ##  workon_pyramid_app $VIRTUAL_ENV_NAME $_APP [open_terminals]
   
   
#### etc/bash/20-bashrc.editor.sh
## ${EDITOR} configuration
#
#  VIRTUAL_ENV_NAME
#  _CFG = 
#
## Editor
    # Configure ${EDITOR}
   
   
#### etc/bash/29-bashrc.vimpagers.sh
## vimpager     -- call vimpager
    # TODO: lesspipe
### less commands -- lessv, lessg, lesse
## lessv    -- less with less.vim and regular vim
    ## start Vim with less.vim and vim
    # Read stdin if no arguments were given.
        # Output is not a terminal, cat arguments or stdin
## lessg    -- less with less.vim and gvim / mvim
## lesse    -- less with current venv's vim server
### Man commands -- manv, mang, mane
## manv     -- view manpages in vim
        #    exit 0
## mang()   -- view manpages in gvim / mvim
## mane()   -- open manpage with venv's vim server
   
   
#### etc/bash/30-bashrc.usrlog.sh
## usrlog   -- Userspace shell logging
## stid()   -- set or regenerate shell session id
#  
    ## usrlog() -- open $_USRLOG with vim (skip to end)
    ## usrlogv()    -- open $_USRLOG with gvim / mvim
    ## usrloge()    -- open $_USRLOG with venv's vim server
   
   
#### etc/bash/30-bashrc.xlck.sh
## xlck     -- screensaver
   
   
#### etc/bash/40-bashrc.aliases.sh
# .bashrc commands
## file paths
    # print absolute path to file
    # Enumerate files from PATH
    # walk upwards from a path
    # see: http://superuser.com/a/65076  
    # Create and open a new shell script
    # List differences between directories
    # Diff the output of two commands
    # open in new tab
    # time_epoch \t size \t user \t type \t path
    #    repos -s $p
    # apt-get install libnss3-tools
    # checks filesystem against dpkg's md5sums 
    #
    # Author: Filippo Giunchedi <filippo@esaurito.net>
    # Version: 0.1
    #
    # this file is public domain 
    # TODO
    # walk down a path
    # see: http://superuser.com/a/65076 
    # FIXME
    # TODO
   
   
#### etc/bash/50-bashrc.bashmarks.sh
## bashmarks
#  l    -- list bashmarks
#  s    -- save bashmarks as $1
#  g    -- goto bashmark $1
#  p    -- print bashmark $1
#  d    -- delete bashmark $1
#  lsbashmarks -- list Bashmarks (e.g. for NERDTree)
# ~/.dotfiles/bin/nerdtree_to_bashmarks.py
   
   
#### etc/bash/70-bashrc.repos.sh
    #  ensure_symlink   -- create or update a symlink to $_to from _from
    #    ln -s $_to $_from
    # if symlink $_from already exists
        # compare the actual paths
        # if a file or folder exists return an errorcode
            # otherwise, create the symlink
    #  ensure_mkdir -- create a directory if it does not yet exist
    #  _venv_ensure_paths()   -- 
    # ensure_mkdir ${prefix}/home
    # ensure_mkdir ${prefix}/opt
    # ensure_mkdir ${prefix}/sbin
    # ensure_mkdir ${prefix}/srv
    #  mkvirtualenv_conda_if_available -- do mkvirtualenv_conda, mkvirtualenv
    #  mkvirtualenv_conda_if_available -- do mkvirtualenv_conda, mkvirtualenv
    #  setup_dotfiles_docs_venv -- create default 'docs' venv
    #  setup_dotfiles_src_venv -- create default 'src' venv
    #
    #   __SRC_HG=${WORKON_HOME}/src/src/hg
    #   __SRC_GIT=${WORKON_HOME}/src/src/git
    #
    #  Hg runs hg commands as user hg
    #  Git runs git commands as user git
    #
    #  Hgclone will mirror to $__SRC_HG
    #  Gitclone will mirror to $__SRC_GIT
    #
    #
    #  get_realpath     -- get an absolute path to a path or symlink (Python)
# __SRC_GIT_REMOTE_URI_PREFIX   -- default git remote uri prefix
# __SRC_GIT_REMOTE_NAME         -- name for git remote v
# __SRC_HG_REMOTE_URI_PREFIX    -- default hg remote uri prefix
# __SRC_HG_REMOTE_NAME          -- name for hg paths
    ## Create a new hosted repository with gitolite-admin
    #  $1   -- repo [user/]name (e.g. westurner/dotfiles)
    ## push a git repository to local git storage
    #  $1   -- repo [user/]name (e.g. westurner/dotfiles) 
    #  $2   -- path of local repo (e.g. ~/wrk/.ve/dotfiles/src/dotfiles)
    ## Create a new hosted repository with mercurial-ssh
    ## push a hg repository to local git storage
    #  $1   -- repo [user/]name (e.g. westurner/dotfiles)
    #  $2   -- path of local repo (e.g. ~/wrk/.ve/dotfiles/src/dotfiles)
    #    fixperms ${path}
    #  host_docs    -- build and host documentation in a local directory
    #   param $1: <project_name>
    #   param $2: [<path>]
    #   param $3: [<docs/Makefile>]
    #   param $4: [<docs/conf.py>]
    # * log documentation builds
    # * build a sphinx documentation set with a Makefile and a conf.py
    # * rsync to docs webserver
    # * set permissions
    # this is not readthedocs.org
    # note: you must manually install packages into the
    # local 'docs' virtualenv'
                        # TODO: prompt?
        # >> 'html_theme = "_-_"
        # << 'html_theme = 'default'
   
   
#### etc/bash/99-bashrc.after.sh
   
   
